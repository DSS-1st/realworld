<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dss.realworld.article.domain.repository.ArticleRepository">
    <delete id="delete" parameterType="Long">
        delete from article where article_id = #{id}
    </delete>

    <insert id="persist" parameterType="Article" useGeneratedKeys="true" keyProperty="id" keyColumn="article_id">
        insert into article(slug, title, description, body, user_id)
        values (#{slug}, #{title}, #{description}, #{body}, #{userId})
    </insert>

    <update id="update" parameterType="Article" useGeneratedKeys="true" keyProperty="id" keyColumn="article_id">
        update article
        set slug        = #{slug},
            title       = #{title},
            description = #{description},
            body        = #{body},
            updated_at  = current_timestamp
        where article_id = #{id}
    </update>

    <sql id="findArticle">
        select article_id as id, slug, title, description, body, created_at as createdAt, updated_at as updatedAt, user_id as userId
        from article
    </sql>

    <select id="findMaxId" resultType="Long">
        select max(article_id) as max_id from article
    </select>

    <select id="findById" parameterType="Long" resultType="Article">
        <include refid="findArticle"/>
        where article_id = #{id}
    </select>

    <select id="findBySlug" parameterType="String" resultType="Article">
        <include refid="findArticle"/>
        where slug = #{slug}
    </select>

    <select id="findArticleByFollower" resultType="Article">
        select article_id as id, slug, title, description, body, user_id, a.created_at, updated_at
        from article a
            join following b on a.user_id = b.target_id
        where b.login_id = #{loginId}
        order by created_at desc, article_id desc
        limit #{limit} offset #{offset}
    </select>

    <select id="listArticles" resultType="Article">
        select a.article_id as id, slug, title, description, body, a.user_id, a.created_at, a.updated_at
        from article a
            left join article_tag at on a.article_id = at.article_id
            left join tag t on at.tag_id = t.tag_id
            left join users u on a.user_id = u.user_id
            left join article_users au on a.article_id = au.article_id
            left join users afu on au.favorited_id = afu.user_id
        <where>
            <if test="tag != null">
                t.name = #{tag}
            </if>
            <if test="author != null">
                u1.username = #{author}
            </if>
            <if test="favorited != null">
                u2.username = #{favorited}
            </if>
        </where>
        group by a.article_id
        order by a.created_at desc, a.article_id desc
        limit #{limit} offset #{offset}
    </select>
</mapper>